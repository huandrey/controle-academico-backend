generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN     // Administrador do sistema
  DISCENTE  // Aluno de alguma instituição que usa o sistema
  DOCENTE   // Professor de alguma instituição casastrado
}

enum DisciplinaStatus {
  APENAS_MEDIA_APROVADO      // A disciplina foi registrada como paga com êxito e aprovado no sistema
  APENAS_MEDIA_REPROVADO     // A disciplina foi registrada como nota insuficiente e reprovado no sistema
  REPROVADO_POR_FALTA        // A disciplina foi registrada como aluno reprovado por falta
  TRANCADA                   // A disciplina foi registrada como trancada pelo aluno
  EM_PROGRESSO
}

model Universidade {
  id        Int      @id @default(autoincrement())
  sigla     String   // A sigla da universidade. Ex: 'UFCG'
  nome      String
  cidade    String
  estado    String
  createdAt DateTime @default(now())
  cursos    Curso[]
}

model User {
  id        Int      @id @default(autoincrement())
  nome      String
  token     String?  
  role      Role     @default(DISCENTE)
  createdAt DateTime @default(now())
  discente  Discente?
  docente   Docente?
}

model Discente {
  id          Int      @id @default(autoincrement())
  nome        String
  matricula   String   @unique @db.VarChar(9) 
  cursoId     Int
  userId      Int      @unique
  livroId     Int?     @unique
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id]) 
  curso       Curso    @relation(fields: [cursoId], references: [id])
  livros      LivroEmprestadoBiblioteca? @relation(fields: [livroId], references: [id])
  disciplinasEmCurso  DisciplinaEmCurso[]
  historicos  HistoricoAlunoDisciplina[]
}

model LivroEmprestadoBiblioteca {
  id            Int           @id @default(autoincrement())
  nomeDoLivro   String
  dataQueFoiPego  String
  dataQuePrecisaSerEntregue String
  dataQueAlunoQuerSerLembrado String
  anotacoesSobreOLivro String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  discente      Discente?      
}


model Docente {
  id        Int      @id @default(autoincrement())
  nome      String
  cursoId   Int
  userId    Int      @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  curso     Curso    @relation(fields: [cursoId], references: [id])
  disciplinas   Disciplina[]
  disciplinasEmCurso  DisciplinaEmCurso[]

  historicos  HistoricoAlunoDisciplina[]
}

model Curso {
  id            Int          @id @default(autoincrement())
  universidadeId Int
  nome          String
  createdAt     DateTime     @default(now())
  universidade  Universidade @relation(fields: [universidadeId], references: [id])
  discentes     Discente[]
  docentes      Docente[]
  disciplinas   Disciplina[]
}

model Disciplina {
  id            Int           @id @default(autoincrement())

  cursoId       Int

  codigo        String?        
  nome          String
  creditos      Int           // Créditos são definidos por horas. Ex: "Cáculo I possui 4 horas semanais, portanto 4 créditos."
  horario       String?


  curso         Curso          @relation(fields: [cursoId], references: [id])
  historicos    HistoricoAlunoDisciplina[]
  disciplinasEmCurso DisciplinaEmCurso[]

  createdAt     DateTime       @default(now())

  Docente Docente[]
}

model HistoricoAlunoDisciplina {
  id            Int           @id @default(autoincrement())
  codigo        String?

  discenteId    Int
  docenteId     Int?
  disciplinaId  Int

  semestre      String        // Semestre em que a disciplina foi cursada
  quantidadeProvas Int
  quantidadeFaltas Int
  mediaFinal    Float?
 
  discente      Discente       @relation(fields: [discenteId], references: [id])
  docente       Docente?       @relation(fields: [docenteId], references: [id])
  disciplina    Disciplina     @relation(fields: [disciplinaId], references: [id])

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model DisciplinaEmCurso {
  id            Int           @id @default(autoincrement())
  
  discenteId    Int
  docenteId     Int?
  disciplinaId  Int
  
  semestre      String        // Semestre em que a disciplina foi cursada
  quantidadeProvas Int
  quantidadeFaltas Int
  mediaFinal    Float?
  horario       String
  
  notaDoDiscente Float?
  status        DisciplinaStatus
  
  discente      Discente       @relation(fields: [discenteId], references: [id])
  docente       Docente?       @relation(fields: [docenteId], references: [id])
  disciplina    Disciplina     @relation(fields: [disciplinaId], references: [id])
}

