generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN     // Administrador do sistema
  ALUNO  // Aluno de alguma instituição que usa o sistema
  DOCENTE   // Professor de alguma instituição casastrado
}

enum DisciplinaStatus {
  APENAS_MEDIA_APROVADO      // Aprovado no sistema com base apenas na média
  APENAS_MEDIA_REPROVADO     // Reprovado no sistema com base apenas na média
  REPROVADO_POR_FALTA        // Reprovado por falta
  TRANCADA                   // Disciplina trancada pelo aluno
  EM_PROGRESSO
}

model User {
  id        Int      @id @default(autoincrement())
  nome      String
  token     String?  
  role      Role     @default(ALUNO)
  createdAt DateTime @default(now())
  aluno  Aluno?
}

model Aluno {
  id                  Int                        @id @default(autoincrement())
  nome                String
  matricula           String                     @unique @db.VarChar(9)
  nome_do_curso       String
  turno_do_curso      String
  nome_do_campus      String
  codigo_do_setor     String
  nome_do_setor       String
  password            String
  userId              Int                        @unique
  livroId             Int?                       @unique
  createdAt           DateTime                   @default(now())
  user                User                       @relation(fields: [userId], references: [id])
  livros              LivroEmprestadoBiblioteca? @relation(fields: [livroId], references: [id])
  historicoMatricula  MatriculaDisciplina[]
}

model LivroEmprestadoBiblioteca {
  id                    Int      @id @default(autoincrement())
  nomeDoLivro           String
  dataQueFoiPego        String
  dataQuePrecisaSerEntregue String
  dataQueAlunoQuerSerLembrado String
  anotacoesSobreOLivro  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
  aluno              Aluno?
}

model MatriculaDisciplina {
  id                    Int              @id @default(autoincrement())
  matriculaDoEstudante  String           // Matrícula do aluno
  codigoDaDisciplina    Int              // Código da disciplina
  nomeDaDisciplina      String           // Nome da disciplina
  periodo               String           // Período em que foi cursada, ex: '2020.1'
  turma                 String?          // Turma da disciplina
  status                String           // Status da disciplina (Aprovado, Reprovado, etc.)
  tipo                  String           // Tipo da disciplina, ex: 'Dispensa'
  mediaFinal            Float?           // Média final da disciplina
  dispensas             String?          // Detalhes de dispensas, se houver
  alunoId               Int              // ID do aluno (aluno)
  aluno                 Aluno            @relation(fields: [alunoId], references: [id])
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @default(now())
}

model Disciplina {
  id                 Int                 @id @default(autoincrement())
  cursoId            Int
  codigo             String?
  nome               String
  creditos           Int                 // Créditos definidos por horas semanais, ex: "4 créditos"
  horario            String?
  createdAt          DateTime             @default(now())
}

